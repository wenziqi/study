lua代码性能优化总结
1.尽量访问局部变量。如果循环里面有用到外部的或者全局的变量，可以在循环外面定义一个局部变量，提高访问效率。

2.多个字符串拼接尽量用table.concat，或者用..，少用string.format

3.常用频繁使用的字符串用变量保存，减少内存开销

4.数据大的情况下优先用哈希表，避免全表扫描，提高访问读写效率

5.避免生成大量的空表或者比较小的table。如b=a or {},可以先定义一个全局的d={},再改成b=a or d

6.避免递归调用

7.避免对table进行copy或者deepcopy

8.数组增加一个元素用t[#t+1]=e,不用table.insert

9.优化if条件判断语句，利用 and 和 or的短路规则，将简单的判断或者更高概率的优先放到前面

10.减少if else语句的跳转

11.接口设计尽量功能单一，避免在get接口调用set接口，或者在set接口又调用get接口。

12.调用频繁的接口，并且返回值固定，不随玩家状态发生变化，只有参数决定，可以考虑缓存返回值。

13.业务逻辑避免大量集中处理，比如登陆、整点刷新、刷天等，可以考虑用定时队列分散处理。

14.不必要的数据不用登陆时就发给客户端。客户端需要的时候再请求，并根据业务特点看是否需要做缓存处理。

15.专门设计一个服去做广播处理，游戏服将数据转发到广播服，广播服再发到指定的或者所有在线的玩家。而不是游戏服遍历玩家列表，然后一个包一个包地发送。


16.数据库异步读写
17.log日志异步读写
